/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: ndiecity (https://sketchfab.com/ndiecity)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/wizard-cat-42cc473a1c17467c8f96e47e2a4439de
title: Wizard Cat
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, Float } from "@react-three/drei";
import {
  useGameState,
  useGameStateRef,
  useHeldBoomerangs,
  usePlayerState,
} from "../../store";
import { useFrame } from "@react-three/fiber";
import { useSpring, animated } from "@react-spring/three";

export default function Model({ ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "/models/black_mage/scene.gltf"
  ) as any;
  const { actions, names, ...rest } = useAnimations(animations, group);

  const [gameStateRef] = useGameStateRef();
  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[names?.[0]]?.reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => {
      actions[names?.[0]]?.fadeOut(0.5);
    };
  }, [actions, names]);

  // const toggle = useRef(false);
  // useFrame(() => {
  //   if (gameStateRef.current.isAnimating && !toggle.current) {
  //     toggle.current = true;
  //     actions[names?.[0]]?.fadeOut(0.5);
  //   } else if (!gameStateRef.current.isAnimating && toggle.current) {
  //     toggle.current = false;
  //     actions[names?.[0]]?.reset().fadeIn(0.5).play();
  //   }
  // });

  const [boomerangs] = useHeldBoomerangs();
  const heldBoomerangs = boomerangs.filter(
    (boomerang) => boomerang.status === "held"
  );
  const FLOAT_PROPS = {
    speed: 10,
    rotationIntensity: 20, // XYZ rotation intensity, defaults to 1
    floatIntensity: 20, // Up/down float intensity, defaults to 1
  };
  const DY = 3;

  const { scale, opacity } = useMageSpring();

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, -2, -2]} rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          {heldBoomerangs.length > 0 && (
            <group position={[0, DY, 0]}>
              <Float {...FLOAT_PROPS}>
                <group
                  position={[1.41, 0.79, -0.86]}
                  rotation={[Math.PI / 2, 0, -1.97]}
                >
                  <mesh
                    geometry={nodes.Object_4.geometry}
                    material={nodes.Object_4.material}
                  />
                </group>
              </Float>
            </group>
          )}
          {heldBoomerangs.length > 1 && (
            <group position={[0, DY, 0]}>
              <Float {...FLOAT_PROPS}>
                <group
                  position={[-1.39, 1.76, 0.58]}
                  rotation={[Math.PI / 2, 0, -1.97]}
                >
                  <mesh
                    geometry={nodes.Object_6.geometry}
                    material={nodes.Object_6.material}
                  />
                </group>
              </Float>
            </group>
          )}
          {heldBoomerangs.length > 2 && (
            <group position={[0, DY, 0]}>
              <Float {...FLOAT_PROPS}>
                <group
                  position={[0.04, 1.71, -2.21]}
                  rotation={[Math.PI / 2, 0, -1.97]}
                >
                  <mesh
                    geometry={nodes.Object_8.geometry}
                    material={nodes.Object_8.material}
                  />
                </group>
              </Float>
            </group>
          )}
          <primitive object={nodes.GLTF_created_0_rootJoint} />
          <animated.skinnedMesh
            scale={scale}
            material-opacity={opacity}
            material-transparent={true}
            castShadow
            receiveShadow
            geometry={nodes.Object_13.geometry}
            material={materials.Material}
            skeleton={nodes.Object_13.skeleton}
          />
          <animated.skinnedMesh
            scale={scale}
            material-opacity={opacity}
            material-transparent={true}
            castShadow
            receiveShadow
            geometry={nodes.Object_14.geometry}
            material={materials.cateye}
            skeleton={nodes.Object_14.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/black_mage/scene.gltf");

function useMageSpring() {
  const [{ poweredUp }] = usePlayerState();
  const [{ invulnerable }] = useGameState();

  const [blinkOn, setBlinkOn] = useState(false);

  useEffect(() => {
    if (invulnerable) {
      setBlinkOn(true);
    }
  }, [invulnerable]);

  return useSpring({
    scale: poweredUp ? 2.4 : 1.4,
    opacity: blinkOn ? 0 : 1,
    onRest: () => {
      if (invulnerable) {
        setBlinkOn(!blinkOn);
      }
      if (!invulnerable && blinkOn) {
        setBlinkOn(false);
      }
    },
  });
}
